float myState[12];
float target[3];
float vectBetween[3];
void init(){
}
void loop(){
    api.getMyZRState(myState);
}

void mVecMultAndNorm(float ret[3], float vinp[3], float mult, bool norm){
	memcpy(ret,vinp,sizeof(float)*3);
	if(norm) mathVecNormalize(ret,3);
	for(int i = 0;i <3;i++){
	    ret[i] *= mult;
	}
}

float setPosAndGo(float k){
float a[3];
float v[3],dtoT;
float myVel[3];
for(int i=0;i<3;i++){
    myVel[i]=myState[i+3];
}
//(((powf(v[0],2))-(powf(myState[3],2)))/2)/v[0];
	mathVecSubtract(v,Target,myState,3);
	dtoT=mathVecMagnitude(v,3);
	
	float magvel=mathVecMagnitude(myVel,3);
    if(dtoT>magvel*6.7){
        k=0.12f;
        mVecMultAndNorm(v,v,k,true);
        for(int i=0;i<3;i++){
            a[i]=(((powf(v[i],2))-(powf(myState[i+3],2)))/2)/v[i];
            if(myState[i+3]>=k&&myState[i+3]/a[i]>0){
                a[i]=0;
            }
        }
        if(mySpeed<k||Time%35==0){
            api.setForces(a);
        }
        return dtoT;
    }
	mVecMultAndNorm (v,v,k,false);
	mathVecAdd (v,v,myState,3);
	api.setPositionTarget(v);
	return dtoT;
}
