float myState[12];//information
float target[3];//target
bool nextTar;//decide if we can get our next target
int mySquare[3];//current square
bool onDown;//decide if we are below Z=.26 "underground"
int squareTarget[3];//target square
void init(){
    api.getMyZRState(myState);
    onDown=false;
    nextTar=true;
    target[0]=0;
	target[1]=0;
	target[2]=0.26;
    squareTarget[0]=1;
    squareTarget[1]=1;
    squareTarget[2]=1;
    mySquare[0]=0;
    mySquare[1]=0;
    mySquare[2]=0;
}
void loop(){
	api.getMyZRState(myState);
	game.pos2square(myState,mySquare);
    if(nextTar){//get next target
        squareTarget[0]=mySquare[0]-1;
        squareTarget[1]=mySquare[1];
        if(fabsf(squareTarget[0])>8||fabsf(squareTarget[1])>10){//if we are out of bounds, increment y axis
            squareTarget[0]=mySquare[0];
            squareTarget[1]=mySquare[1]+1;
        }
        nextTar=false;//do not find next target until we are at current
    }
    dip();//change Z-Axis
    if(moveTo(target)){//if we are at the REAL target(after we are done drilling)
        onDown=false;//go up
        nextTar=true;//find next target
    }
}
void dip(){//changes the target Z-Axis to not crash.
    //only works if two squares are adjacent
    float topHeight; 
    if(game.getTerrainHeight(mySquare)>game.getTerrainHeight(squareTarget)){//our square height is greater than target square
        topHeight=game.getTerrainHeight(squareTarget);//decide reletive height so we do not always have to go all the way up
    }else{
        topHeight = game.getTerrainHeight(mySquare);
    }
    //this is to get to top level after we are done drilling
    if(myState[2]>topHeight - .13&&!onDown){
        onDown=false;
        DEBUG(("getOut"));
        game.square2pos(mySquare, target); //not squareTarget!!
        target[2]=topHeight - .14;
    }
    //this is to get to XY target square, NOT Z
    else if(mySquare[0]!=squareTarget[0]||mySquare[1]!=squareTarget[1]){
        //or
        DEBUG(("top target"));
        game.square2pos(squareTarget,target);
        target[2]=topHeight - .14;
    }
    //this is to go down on Z once we are at XY target square
    else{
        onDown=true;
        DEBUG(("real target"));
        game.square2pos(squareTarget,target);
        target[2]=game.getTerrainHeight(squareTarget)-.14;
    }
}
bool moveTo(float target[3]){
    float futurePos[3];//Where we WILL be in the next second
    float futureToTarget[3];//vector between target and future position
    float distToTarget;//distance to target(absolute value)
    float vectToTarget[3];//vector to target
    float vectToSetMag;//multiplier, function of distance over time.
    //We graphed SPHERE movement and linearized to save code space, and then took the function.
    float futureDist;//Distance from futurePos to target
    float currentVelMag;//Current Speed
    
    api.getMyZRState(myState);
    for(int y=0;y<3;y++){
        futurePos[y]=myState[y]+myState[y+3];//myposition+myVelocity
    }
	currentVelMag=fabsf(mathVecMagnitude(myState+3,3));//magnitude of speed.
	mathVecSubtract(futureToTarget, target, futurePos, 3);//target-futureposition=futuretotarget
	futureDist = fabsf(mathVecNormalize(futureToTarget, 3));//get distance from futurePos to target
	mathVecSubtract(vectToTarget, target, myState, 3);//vector between target and our current position
	distToTarget = fabsf(mathVecNormalize(vectToTarget, 3));//distance from target to our current position
	vectToSetMag = fabsf(sqrt(.007*futureDist));//function that we got from graphing SPHERE movement
	//can change number(0.007) to get faster but more fuel, or slower and less fuel.
	for(int i=0;i<3;i++){
	    futureToTarget[i]*=vectToSetMag;
	}
	api.setVelocityTarget(futureToTarget);
	if(distToTarget<.01){
	    return true;
	}
	else{
	    return false;
	}
}
